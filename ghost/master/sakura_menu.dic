SakuraMenuGreetings : nonoverlap
{
	"Yes yes,\w8 you have question?"
	"Yes,\w8 yes?"
	"Problem?"
	"There problem?"
	"I listen!"
	"Interview going well,\w8 yes?"
}

//Because there is an all modifier here, you don't need to write -- between menu options
OnSakuraMenu : all
{
	"\0\b[2]\s[0]\![set,autoscroll,disable]\![no-pause]\![close,inputbox,OnAnswerQuestion]"
	"\n"
	
	"\n\n\_q"
	
	"\![*]\q[So...,OnAiTalk]\n"
	if LastTalk != ""; "\![*]\__q[OnLastTalk]I'm sorry, what was that?\__q"
	"\n\n"
	
	"\![*]\__q[OnAskMeAQuestion]Do you have more questions?\__q\n"
	"\![*]\__q[OnAskBossAQuestion]Can I ask you something?\__q\n\n"
	if LightsOn; "\![*]\__q[OnChangeTie]Do you have any other ties?\__q"
	
	
	"\n\n"
	
	if SHIORI3FW.BalloonName == "Stuck to a Filing Cabinet"; "\![*]\__q[OnCustomizeBalloon]About those stickynotes...\__q\n"
	else; "\n"
	
	"\![*]\__q[OnTalkRateMenu]Can we change the pace?\__q\n\n"
	
	"\![*]\q[Nevermind,blank]"
	"\_l[0,0]\_q"
	if SHIORI3FW.Eventid == "OnMouseDoubleClick"; SakuraMenuGreetings //The check here is so they won't comment if you click the back button. Remove if you prefer
}

OnLastTalk
{
	LastTalk
}

OnAskMeAQuestion
{
	OnAiTalk("question")
}

OnAskBossAQuestion
{
	"\0\b[4]\![open,inputbox,OnAskQuestion,-1,--balloon=__INPUT%(C_BYTE1)BALLOON__]\t\*"
	--
	"%(neutral)%(forward)Yes yes, question for me? Ask, ask!"
	"%(neutral)%(forward)Yes, question, ask!"
	"%(tie)%(nervous)Question?"
	"%(paper)%(processing)Oh? Questions?? %(neutral)%(pet)Yes yes yes, ask, ask."
	--
	"\_q\n\n\![*]\__q[OnCancelQuestion]Actually,\_w[0] nevermind...\__q"
}

OnCancelQuestion
{
	"\0\b[4]\![close,inputbox,OnAskQuestion]"
	--
	"%(paper)%(scowl)%(DragonNoisePrefix)..."
}

OnChangeTie : nonoverlap
{
	"\0\b[0]%(agitated)%(happy)Yes, yes! Have many ties, special co-\w4llec-\w4tion. %(tie)%(forward)You would like to see another? Wait moment!"
	--
	"\s[700]\i[4]"
	--
	"\_w[2000]\n\nFind right one... Ah! "
	--
	"\![bind,Tie,,0]\![bind,Tie,%(ANY(TiesAvailable)),1]"
	--
	"%(neutral)%(forward)\n\nNew pattern, see? Favorite of mine!"
	"%(neutral)%(forward)\n\nThis is good pattern, yes, yes!"
}

OnCustomizeBalloon : all
{
	_colors = ("yellow","pink","blue","orange","green","purple","notary","inkwell","shimmer","starlight")
	_b = ""
	if MAX(BalloonColors) == 0; _b = "100"
	elseif TOSTR(TOINT(reference0)) != reference0; _b = "0"
	elseif reference0 != ""; _b = reference0 + "0"
	else; _b = "0"
	
	
	"\C\![lock,balloonrepaint]\c\0\s[0]\b[%(_b),--fallback=2]\_q\*\![set,autoscroll,disable]\![no-pause]"
	
	/*
	
		Need some sort of setup to tell which colors are on vs off
		Probably just an array of 0 and 1 tbqh... that would be easy
		Need a preview button that switches to the color you want to see
		All on and all off should be easy with the array being 0s and 1s
		Defaults will be a preset
		and........
	
	*/
	"\f[align,center]— Color rotation —\n\f[align,left]\n"
	for _i = 0; _i < ARRAYSIZE(_colors); _i++
	{
		_name = _colors[_i]
		
		"\![*]"
		switch BalloonColors[_i]
		{
			"\f[color,disable]\q[%(_name),OnToggleBalloonColor,%(_i),1]\f[color,default]"
			"\q[%(_name),OnToggleBalloonColor,%(_i),0]"
		}
		
		if _i % 2 == 0; "\n \n[-100]\f[align,right]"
		else; "\n\f[align,left]"
	}
	
	"\n\f[align,center]"
	"\![*]\q[Defaults,OnToggleAllBalloons,default]  \![*]\q[Random selection,OnToggleAllBalloons,random]\n"
	"\![*]\q[All on,OnToggleAllBalloons,on]  \![*]\q[All off,OnToggleAllBalloons,off]"
	
	"\n\n[75]\f[align,center]"
	"\![*]\q[Back,OnSakuraMenu]  \![*]\q[Nevermind,blank]"
	"\![unlock,balloonrepaint]"
}

OnToggleBalloonColor
{
	BalloonColors[TOINT(reference0)] = TOINT(reference1)
	"\C\![raise,OnCustomizeBalloon,%(reference0)]"
}

OnToggleAllBalloons
{
	if reference0 == "on"
	{
		BalloonColors = (1,1,1,1,1,1,1,1,1,1)
	}
	elseif reference0 == "off"
	{
		BalloonColors = (0,0,0,0,0,0,0,0,0,0)
	}
	elseif reference0 == "random"
	{
		for _i = 0; _i < ARRAYSIZE(BalloonColors); _i++
		{
			BalloonColors[_i] = RAND(2)
		}
	}
	else //default
	{
		BalloonColors = (1,1,1,1,1,1,0,0,0,0)
	}
	"\C\![raise,OnCustomizeBalloon,%(reference0)]"
}

OnTalkRateMenu : all
{	
	//This is just setting up a label, you may need to add to it or tweak it if you change what rates are available
	_talkrate = "Off"
	if aitalkinterval == 30; _talkrate = "30 seconds"
	elseif aitalkinterval == 60; _talkrate = "1 minute"
	elseif aitalkinterval == 180; _talkrate = "3 minutes"
	elseif aitalkinterval == 300; _talkrate = "5 minutes"
	elseif aitalkinterval == 600; _talkrate = "10 minutes"
	
	"\C\![lock,balloonrepaint]\c\0\b[2]\s[0]\![set,autoscroll,disable]\_q\![no-pause]"
	"Current interval: \f[color,default.anchor]%(_talkrate)\f[color,default]\n\n"
	
	"\![*]\q[Off,OnTalkRateChange,0]\n"
	"\![*]\q[30 seconds,OnTalkRateChange,30]\n"
	"\![*]\q[1 minute,OnTalkRateChange,60]\n"
	"\![*]\q[3 minutes,OnTalkRateChange,180]\n"
	"\![*]\q[5 minutes,OnTalkRateChange,300]\n"
	"\![*]\q[10 minutes,OnTalkRateChange,600]\n"
	"\n"
	"Talk about: \f[color,default.anchor]%(TalkTopic)\f[color,default]\n\n"
	"\![*]\q[Interview questions,OnTalkTopicChange,questions]\n"
	"\![*]\q[Idle chatter,OnTalkTopicChange,chatter]\n"
	"\![*]\q[Questions & chatter,OnTalkTopicChange,both]\n"
	"\n"
	"\![*]\q[Back,OnSakuraMenu]  \![*]\q[Nevermind,blank]"
	"\![unlock,balloonrepaint]"
}

OnTalkRateChange
{
	aitalkinterval = TOINT(reference0)
	"\C\![raise,OnTalkRateMenu]"
}

OnTalkTopicChange
{
	TalkTopic = reference0
	"\C\![raise,OnTalkRateMenu]"
}

Intent
{
	_search = _argv[0]
	_input = _argv
	_input[0] = IARRAY //erase search term(s)
	if "," _in_ _search; _search = SPLIT(_search,",")
	
	foreach _search; _term
	{
		if ASEARCH(_term,_input) == -1; {0; return}
	}
	1
}

//Here is where we process the question text and determine what sort of tone Boss thinks the user is taking/what topics they might be talking about
ProcessQuestion
{
	_input = TOLOWER(_argv[0])
	_len = STRLEN(_input)
	_output = IARRAY
	
	/*
		Possible intents:
		
		growl
		hiss
		screaming
		excited
		interested
		stressed
		thoughtful
		confused
		inquisitive
		hesitant
		repeating
		soft
		loud
		long
		short
		one word
		definitive
		demanding
		
		Repeated letter reference:
		
		aaa - screaming
		eee - excited (also triggered by multiple scattered !s)
		ooo - interested
		hhh - stressed
		mmm - thoughtful
		sss - hiss (also triggered by multiple scattered Hs)
		rrr - growl (also triggered by multiple scattered Gs)
		?? - confused
	*/
	
	if LetterCount(_input,"g") + LetterCount(_input,"r") >= 10 || "rrr" _in_ _input; _output ,= "growl"
	if LetterCount(_input,"h") >= 10 || "sss" _in_ _input; _output ,= "hiss"
	if "aaa" _in_ _input; _output ,= "screaming"
	if "eee" _in_ _input; _output ,= "excited" //same as ! but i think that's ok...
	if "ooo" _in_ _input; _output ,= "interested"
	if "hhh" _in_ _input; _output ,= "stressed"
	if "mmm" _in_ _input; _output ,= "thoughtful"
	if "??" _in_ _input; _output ,= "confused"
	elseif LetterCount(_input,"?") >= 3 || SUBSTR(_input,_len - 1,1) == "?"; _output ,= "inquisitive"
	if LetterCount(_input,"!") >= 2; _output ,= "excited"
	if LetterCount(_input,"...") >= 2; _output ,= "hesitant"
	if RepeatedWords(_input); _output ,= "repeating" //right now works with 2 or more words, do we want this to be 3 or more?
	if _input == _argv[0]; _output ,= "soft" //All lowercase
	if TOUPPER(_input) == _argv[0]; _output ,= "loud" //All uppercase
	if STRLEN(_input) >= 100; _output ,= "long"
	if STRLEN(_input) <= 5; _output ,= "short"
	if ARRAYSIZE(SPLIT(_input," ")) == 1; _output ,= "one word"
	if SUBSTR(_input,_len - 1,1) == "." && SUBSTR(_input,_len - 2,1) != "."; _output ,= "definitive"
	if "!?" _in_ _input || "?!" _in_ _input; _output ,= "demanding"
	
	_output
}

//Count the amount of a specific character in a string
//You CAN put multiple letters in at once, but it will only count each instance it finds once, without overlapping.
//Argument 0: The string to check
//Argument 1: The letter(s) to search for (case sensitive)
//Examples:
//LetterCount("Ukagaka","a") //Returns 3
//LetterCount("Ukagaka","ka") //Returns 2
LetterCount
{
	_input = _argv[0]
	_let = _argv[1]
	_replaced = REPLACE(_input,_let,"")
	_num = STRLEN(_input) - STRLEN(_replaced)
	if STRLEN(_let) > 1; _num /= STRLEN(_let)
	_num
}

//idk why i made this, this is silly and doesn't work
// RepeatedLetters
// {
	// _input = _argv[0]
	// _let = _argv[1]
	// _replaced = REPLACE(_input,_let,"")
	// _num = STRLEN(_input) - STRLEN(_replaced)
	// _num >= 3
// }

RepeatedWords
{
	_input = _argv[0]
	if " " _in_ _input
	{
		_input = SPLIT(_input," ")
		_first = _input[0]
		foreach _input; _word
		{
			if _word != _first; {0; return}
		}
		1
	}
	else; 0
}

OnTestMangler : all
{
	_name = _argv[0]
	LOGGING("====================================================================")
	LOGGING("_name: %(_name)")
	for _i = 7; _i >= 0; _i--
	{
		LOGGING("_i: %(_i)")
		NameMangler(_name,_i) + "\n"
	}
}

ProgressMangler
{
	LOGGING("====================================================================")
	if !ISVAR("NameIndex"); NameIndex = 7
	_input = SavedUsername
	_output = ""
	
	if _input == ""
	{
		NameIndex = 0
		TempNames
		return
	}
	
	while _output == _input || _output == ""
	{
		_output = NameMangler(_input,NameIndex)
		if NameIndex <= 0
		{
			_output = username
			break
		}
		else; NameIndex--
	}
	
	CurrentName = _output
}

NameMangler
{
	/*
		Mangler.DragonNoises
		Mangler.Backwards / Mangler.LengthenPalindrome
		Mangler.Stuttering
		Mangler.ConsonantVowel
		Mangler.VowelConsonant
		Mangler.CaseChange
		Mangler.LengthenDoubles
		Mangler.ShortenDoubles
		
		Mangler.RepeatSingle - special case if you put a single letter as your name
		
		So the plan is, start at the top of this list, try the first mangle. If nothing in your name changes, skip and go to the next.
		I will needle a global to track at what point in the mangle list you are...
		Once you make it to the end of the list! They got it right! Yay!
		If somehow you get through all these options without a single mangle happening. ....... damn, impressive, let me know what your name is so i can make another special case
	*/
	
	_input = _argv[0]
	_index = TOINT(_argv[1])
	
	if STRLEN(_input) == 1
	{
		Mangler.RepeatSingle(_input)
		return
	}
	
	switch _index
	{
		Mangler.ShortenDoubles(_input)
		Mangler.LengthenDoubles(_input)
		Mangler.CaseChange(_input)
		Mangler.VowelConsonant(_input)
		Mangler.ConsonantVowel(_input)
		Mangler.Stuttering(_input)
		Mangler.DragonNoises(_input)
		if ReverseString(TOLOWER(_input)) == TOLOWER(_input); Mangler.LengthenPalindrome(_input)
		else; Mangler.Backwards(_input)
	}
	
}

Mangler.VowelConsonant
{
	_input = _argv[0]
	
	_lastletter = ""
	_pairs = IARRAY
	for _i = 0; _i <= STRLEN(_input) - 1; _i++
	{
		_currentletter = SUBSTR(_input,_i,1)
		if IsVowel(_lastletter) && !IsVowel(_currentletter) && _lastletter != ""; _pairs ,= _lastletter + _currentletter
		_lastletter = _currentletter
	}
	
	_pairs = ARRAYDEDUP(_pairs)
	LOGGING("_pairs: %(_pairs)")
	foreach _pairs; _pair
	{
		_rand = RAND(2) + 2
		_str = ""
		for _i = 0; _i < _rand; _i++
		{
			_str += _pair
		}
		_input = REPLACE(_input,"%(_pair)","%(_str)")
	}
	
	_input
}

Mangler.ConsonantVowel
{
	_input = _argv[0]
	
	_lastletter = ""
	_pairs = IARRAY
	for _i = 0; _i <= STRLEN(_input) - 1; _i++
	{
		_currentletter = SUBSTR(_input,_i,1)
		if IsVowel(_currentletter) && !IsVowel(_lastletter) && _lastletter != ""; _pairs ,= _lastletter + _currentletter
		_lastletter = _currentletter
	}
	
	_pairs = ARRAYDEDUP(_pairs)
	
	foreach _pairs; _pair
	{
		_rand = RAND(2) + 2
		_str = ""
		for _i = 0; _i < _rand; _i++
		{
			_str += _pair
		}
		_input = REPLACE(_input,"%(_pair)","%(_str)")
	}
	
	_input
}

Mangler.LengthenDoubles
{
	_input = _argv[0]
	
	_lastletter = ""
	_doubles = IARRAY
	for _i = 0; _i <= STRLEN(_input); _i++
	{
		_currentletter = SUBSTR(_input,_i,1)
		if _currentletter == _lastletter; _doubles ,= _currentletter
		_lastletter = _currentletter
	}
	
	_doubles = ARRAYDEDUP(_doubles)
	
	foreach _doubles; _double
	{
		_rand = RAND(5) + 4
		_str = ""
		for _i = 0; _i < _rand; _i++
		{
			_str += _double
		}
		_input = REPLACE(_input,"%(_double)%(_double)","%(_str)")
	}
	
	_input
}

Mangler.ShortenDoubles
{
	_input = _argv[0]
	
	_lastletter = ""
	_doubles = IARRAY
	for _i = 0; _i <= STRLEN(_input); _i++
	{
		_currentletter = SUBSTR(_input,_i,1)
		if _currentletter == _lastletter; _doubles ,= _currentletter
		_lastletter = _currentletter
	}
	
	_doubles = ARRAYDEDUP(_doubles)
	
	foreach _doubles; _double
	{
		_input = REPLACE(_input,"%(_double)%(_double)","%(_double)")
	}
	
	_input
}

Mangler.Backwards
{
	_input = _argv[0]
	_output = ""
	
	_output = ReverseString(_input)
	
	Capitalize(_output)
}

ReverseString
{
	_input = _argv[0]
	_output = ""
	
	for _i = STRLEN(_input); _i >= 0 ; _i--
	{
		_output += TOLOWER(SUBSTR(_input,_i,1))
	}
	_output
}

Mangler.Stuttering
{
	_input = _argv[0]
	_output = ""
	
	for _i = 1; _i <= STRLEN(_input); _i++
	{
		if _i > 1; _output += "-"
		_output += SUBSTR(_input,0,_i)
	}
	
	_output
}

Mangler.DragonNoises
{
	DragonNoisePrefix + TOLOWER(_argv[0]) + DragonNoiseSuffix
}




// Mangler.Uppercase
// {
	// _input = _argv[0]
	// _output = ""
	
	// _output
// }

Mangler.CaseChange
{
	_input = _argv[0]
	_output = ""
	
	for _i = 0; _i < STRLEN(_input); _i++
	{
		_str = SUBSTR(_input,_i,1)
		if _i == 0; _output += _str
		elseif RAND(2); _output += TOUPPER(_str)
		else; _output += TOLOWER(_str)
	}
	
	_output
}

Mangler.RepeatSingle
{
	_input = _argv[0]
	_output = ""
	_rand = RAND(10) + 3
	
	for _i = 0; _i < _rand; _i++
	{
		if _i == 0; _output += _input
		elseif RAND(2); _output += TOUPPER(_input)
		else; _output += TOLOWER(_input)
	}
	
	_output
}

Mangler.LengthenPalindrome
{
	_input = _argv[0]
	_output = ""
	_middlenum = (STRLEN(_input) / 2)
	_middle = SUBSTR(_input,_middlenum,1)
	_isodd = STRLEN(_input) % 2
	
	_first = ""
	_last = ""
	
	_first = SUBSTR(_input,0,_middlenum - 1)
	if _isodd; _first = SUBSTR(_input,0,_middlenum)
	else; _first = SUBSTR(_input,0,_middlenum - 1)
	
	if _isodd; _last = SUBSTR(_input,_middlenum + 1,_middlenum)
	else; _last = SUBSTR(_input,_middlenum,_middlenum)
	
	_mid = ""
	_rand = RAND(10) + 3
	for _i = 0; _i < _rand; _i++
	{
		_mid += _middle
	}
	
	_first + _mid + _last
	
	//_output
}
